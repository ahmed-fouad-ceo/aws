terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }

  required_version = ">= 1.2.0"
}

provider "aws" {
  region  = "us-west-2"
}

resource "aws_instance" "app_server" {
  ami           = "ami-830c94e3"
  instance_type = "t2.micro"

  tags = {
    Name = "nextsample1"
  }
}
resource "aws_eks_node_group" "sample" {
  cluster_name    = aws_eks_cluster.example.name
  node_group_name = "nexteks1"
  node_role_arn   = aws_iam_role.arn
  subnet_ids      = aws_subnet[*].id

  scaling_config {
    desired_size = 1
    max_size     = 1
    min_size     = 1
  }

  update_config {
    max_unavailable = 2
  }

  depends_on = [
    aws_iam_role_policy_attachment.sample-AmazonEKSWorkerNodePolicy,
    aws_iam_role_policy_attachment.sample-AmazonEKS_CNI_Policy,
    aws_iam_role_policy_attachment.sample-AmazonEC2ContainerRegistryReadOnly,
  ]
}

resource "random_password" "password" {
  length           = 16
  special          = true
  override_special = "_%@"
}
 
 
resource "aws_secretsmanager_secret" "secretmasterDB" {
   name = "Masteraccoundb"
}
  
resource "aws_secretsmanager_secret_version" "sversion" {
  secret_id = aws_secretsmanager_secret.secretmasterDB.id
  secret_string = <<EOF
   {
    "username": "adminaccount",
    "password": "${random_password.password.result}"
   }
EOF
}

resource "kubernetes_manifest" "argo_application" {

  computed_fields = [
    "metadata.labels",
    "metadata.annotations",
    "metadata.finalizers",
    "spec.source.helm.version"
  ]
  field_manager {
    force_conflicts = true
  }
  manifest = {
    apiVersion = "argoproj.io/v1alpha1"
    kind       = "Application"
    metadata = {
      name       = var.name
      namespace  = var.argocd_namespace
      labels     = local.labels
      finalizers = var.cascade_delete == true ? ["resources-finalizer.argocd.argoproj.io"] : []
    }
    spec = {
      project = var.project
      source = {
        repoURL        = var.repo_url
        targetRevision = var.target_revision
        chart          = var.chart
        path           = var.path
        helm = {
          releaseName = var.release_name == null ? var.name : var.release_name
          parameters  = local.helm_parameters
          values      = yamlencode(merge({ labels = local.labels }, var.helm_values))
        }
      }
      destination = {
        server    = var.destination_server
        namespace = var.namespace
      }
      ignoreDifferences = var.ignore_differences
      syncPolicy = {
        automated = {
          prune    = var.automated_prune
          selfHeal = var.automated_self_heal
        }
        syncOptions = concat(var.sync_options, [
          var.sync_option_validate ? "Validate=true" : "Validate=false",
          var.sync_option_create_namespace ? "CreateNamespace=true" : "CreateNamespace=false",
        ])
        retry = {
          limit = var.retry_limit
          backoff = {
            duration    = var.retry_backoff_duration
            factor      = var.retry_backoff_factor
            maxDuration = var.retry_backoff_max_duration
          }
        }
      }
      ignoreDifferences = var.ignore_differences
    }
  }
}
 
 
data "aws_secretsmanager_secret" "secretmasterDB" {
  arn = aws_secretsmanager_secret.secretmasterDB.arn
}
 
 
data "aws_secretsmanager_secret_version" "creds" {
  secret_id = data.aws_secretsmanager_secret.secretmasterDB.arn
}
  
locals {
  db_creds = jsondecode(data.aws_secretsmanager_secret_version.creds.secret_string)
}
resource "aws_route53_zone" "sanplezone1" {
  name     = "sanplezone1"
}
resource "aws_ecr_repository" "name111" {
  name = "bar"
}

resource "aws_ecr_repository_policy" "name111" {
  repository = aws_ecr_repository.name111.name

  policy = <<EOF
{
    "Version": "2008-10-17",
    "Statement": [
        {
            "Sid": "new policy",
            "Effect": "Allow",
            "Principal": "*",
            "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload",
                "ecr:DescribeRepositories",
                "ecr:GetRepositoryPolicy",
                "ecr:ListImages",
                "ecr:DeleteRepository",
                "ecr:BatchDeleteImage",
                "ecr:SetRepositoryPolicy",
                "ecr:DeleteRepositoryPolicy"
            ]
        }
    ]
}
EOF
}
